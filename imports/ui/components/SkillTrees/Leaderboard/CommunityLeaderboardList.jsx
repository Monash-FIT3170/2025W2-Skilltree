import { Meteor } from 'meteor/meteor';
import React from 'react';

import { Badge, List, ListItem } from 'flowbite-react';

import { useSubscribeSuspense } from 'meteor/communitypackages:react-router-ssr';
import { useFind } from 'meteor/react-meteor-data/suspense';

import { SkillTreeCollection } from '/imports/api/collections/SkillTree';
import { SubscriptionsCollection } from '/imports/api/collections/Subscriptions';

/**
 * CommunityLeaderboardList.jsx
 *
 * Renders a list component that displays users in a SkillTree
 *
 * @component
 * @example
 * // Example usage
 * <CommunityLeaderboardList skillTreeId = {id}></CommunityLeaderboardList>
 *
 * @param {skillTreeId} _id of SkillTree to exctract users from
 * @param {filter} filter field from user.profile to sort by (String)
 *
 * @returns List of users inside skilltree
 */
export const CommunityLeaderboardList = ({ skillTreeId, filter }) => {
  // useFind to query user data
  useSubscribeSuspense('skilltrees');
  const targetSkillTree = useFind(
    SkillTreeCollection,
    [
      {
        _id: {
          $eq: skillTreeId
        }
      },
      {
        fields: {
          subscribers: 1,
          title: 1
        }
      }
    ],
    [skillTreeId]
  )[0];

  /**
   * The following MongoDB calls and the code to integrate them
   * were generated by Microsoft Copilot using GPT-4.1, and modified
   * to use proper field names.
   *
   * Prompt (included an attached copy of the previous revision of this file):
   *  how can i modify this mongo call to do the following:
   *  // GET ALL USERS FROM SUBSCRIBER ARRAY
   *  // GET THEIR SUBSCRIPTION DOCUMENTS FOR THIS SKILLTREE AND READ THEIR XP VALUES
   *  // SORT BY XP VALUES AND RETURN USERNAMES AND XP VALUES FOR DISPLAY IN THE LIST
   */

  const subscriberIds = targetSkillTree?.subscribers ?? [];

  useSubscribeSuspense('usernames', subscriberIds);
  const users = useFind(
    Meteor.users,
    [{ _id: { $in: subscriberIds } }, { fields: { username: 1 } }],
    [subscriberIds]
  );

  useSubscribeSuspense('subscriptions');
  const subscriptions = useFind(
    SubscriptionsCollection,
    [
      { skillTreeId: { $eq: skillTreeId }, userId: { $in: subscriberIds } },
      { fields: { userId: 1, totalXp: 1, numComments: 1 } }
    ],
    [skillTreeId, ...subscriberIds]
  );

  // Map userId to XP
  const xpMap = {};
  subscriptions.forEach(sub => {
    xpMap[sub.userId] = sub.totalXp ?? 0;
  });

  const numCommentsMap = {};
  subscriptions.forEach(sub => {
    numCommentsMap[sub.userId] = sub.numComments ?? 0;
  });

  // Combine users with their XP
  const leaderboard = users.map(user => ({
    username: user.username,
    totalXp: xpMap[user._id] ?? 0,
    numComments: numCommentsMap[user._id] ?? 0
  }));

  // Sort by XP descending
  leaderboard.sort((a, b) => b.totalXp - a.totalXp);

  return (
    <List unstyled className="divide-y divide-gray-200">
      {leaderboard.map((entry, index) => (
        <ListItem key={entry.username} className="pb-3">
          <div className="flex items-center space-x-4">
            <Badge
              color="green"
              size="sm"
              className="rounded-full p-1.5 w-[4ch] tabular-nums items-center justify-center inline-flex"
            >
              {String(index + 1)}
            </Badge>
            <span>{entry.username}</span>
            <span>
              {filter === 'totalXp' ? entry.totalXp : entry.numComments}
            </span>
          </div>
        </ListItem>
      ))}
    </List>
  );
};
