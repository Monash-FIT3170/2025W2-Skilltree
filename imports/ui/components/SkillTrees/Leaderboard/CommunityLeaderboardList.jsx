import { Meteor } from 'meteor/meteor';
import React, { useEffect, useRef, useState } from 'react';

import { Badge, Button, List, ListItem } from 'flowbite-react';

import { useFind, useSubscribe } from 'meteor/react-meteor-data/suspense';

import { SkillTreeCollection } from '/imports/api/collections/SkillTree';
import { SubscriptionsCollection } from '/imports/api/collections/Subscriptions';

/**
 * CommunityLeaderboardList.jsx
 *
 * Renders a list component that displays users in a SkillTree
 *
 * @component
 * @example
 * // Example usage
 * <CommunityLeaderboardList skillTreeId = {id}></CommunityLeaderboardList>
 *
 * @param {skillTreeId} _id of SkillTree to exctract users from
 * @param {filter} filter field from user.profile to sort by (String)
 *
 * @returns List of users inside skilltree
 */
export const CommunityLeaderboardList = ({ skillTreeId, filter }) => {
  // current user
  const currUserId = Meteor.userId();

  const userRef = useRef(null);
  const [isVisible, setIsVisible] = useState(false);
  const [isInList, setIsInList] = useState(false);

  // callback function for intersection observer
  const callbackFunction = entries => {
    const [entry] = entries;
    setIsVisible(entry.isIntersecting);
    console.log(isVisible);
  };

  // options for intersection observer
  const options = {
    root: null,
    rootMarge: '0px',
    threshold: 0.01
  };

  // useFind to query user data
  useSubscribe('skilltrees');
  const targetSkillTree = useFind(
    SkillTreeCollection,
    [
      {
        _id: {
          $eq: skillTreeId
        }
      },
      {
        fields: {
          subscribers: 1,
          title: 1
        }
      }
    ],
    [skillTreeId]
  )[0];

  const scrollToUser = () => {
    if (userRef.current) {
      userRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  };

  useEffect(() => {
    const observer = new IntersectionObserver(callbackFunction, options);

    if (userRef.current) {
      setIsInList(true);
      observer.observe(userRef.current);
    }

    // cleanup function when component unmounts
    return () => {
      if (userRef.current) {
        observer.unobserve(userRef.current);
      }
    };
  }, [userRef, options]);

  /**
   * The following MongoDB calls and the code to integrate them
   * were modified from code generated by Microsoft Copilot using GPT-4.1
   * to work with our implementation.
   *
   * Prompt (included an attached copy of the previous revision of this file):
   *  how can i modify this mongo call to do the following:
   *  // GET ALL USERS FROM SUBSCRIBER ARRAY
   *  // GET THEIR SUBSCRIPTION DOCUMENTS FOR THIS SKILLTREE AND READ THEIR XP VALUES
   *  // SORT BY XP VALUES AND RETURN USERNAMES AND XP VALUES FOR DISPLAY IN THE LIST
   */

  const subscriberIds = targetSkillTree?.subscribers ?? [];

  useSubscribe('usernames', subscriberIds);
  const users = useFind(
    Meteor.users,
    [{ _id: { $in: subscriberIds } }, { fields: { username: 1, _id: 1 } }],
    [subscriberIds]
  );

  useSubscribe('subscriptions');
  const subscriptions = useFind(
    SubscriptionsCollection,
    [
      { skillTreeId: { $eq: skillTreeId }, userId: { $in: subscriberIds } },
      { fields: { userId: 1, totalXp: 1, numComments: 1 } }
    ],
    [skillTreeId, ...subscriberIds]
  );

  // Map userId to their values
  const xpMap = {};
  subscriptions.forEach(sub => {
    xpMap[sub.userId] = sub.totalXp ?? 0;
  });

  const numCommentsMap = {};
  subscriptions.forEach(sub => {
    numCommentsMap[sub.userId] = sub.numComments ?? 0;
  });

  // Combine users with their values
  const leaderboard = users.map(user => ({
    _id: user._id,
    username: user.username,
    totalXp: xpMap[user._id] ?? 0,
    numComments: numCommentsMap[user._id] ?? 0
  }));

  // Sort by filtered value, descending
  leaderboard.sort((a, b) => b[filter] - a[filter]);

  return (
    <List unstyled className="divide-y divide-gray-200 relative space-y-0">
      {leaderboard.map((entry, index) => {
        const isCurrentUser = entry._id === currUserId;
        return (
          <ListItem
            key={entry._id}
            ref={isCurrentUser ? userRef : null}
            className={`py-3 ${isCurrentUser ? 'bg-green-100' : ''}`}
            onClick={() => console.log(entry)}
          >
            <div className="flex items-center">
              <div className="flex w-2/20 items-center justify-center-safe">
                <Badge
                  color="green"
                  size="sm"
                  className="rounded-full p-1.5 w-[4ch] tabular-nums items-center justify-center inline-flex hover:bg-green-100"
                >
                  {String(index + 1)}
                </Badge>
              </div>
              <div className="flex w-3/20 items-center justify-center-safe">
                {`${entry.username}`}
              </div>
              <div className="flex w-6/20 items-center justify-center-safe">
                {filter === 'totalXp' ? entry.totalXp : entry.numComments}
              </div>
            </div>
          </ListItem>
        );
      })}

      {isInList && (
        <div className="fixed bottom-1/6 left-1/2 transform -translate-x-1/2 z-50">
          {!isVisible && (
            <Button
              onClick={scrollToUser}
              pill
              className="cursor-pointer text-lg font-bold text-white leading-none !font-sans flex items-center gap-3 px-6 py-3 bg-[#328E6E] rounded-[22px] transition-all duration-200 hover:bg-[#2a7a5e] focus:outline-none focus:ring-0 object-cover "
            >
              Scroll to me
            </Button>
          )}
        </div>
      )}
    </List>
  );
};
